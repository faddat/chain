// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lum-network/beam/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetBeamRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBeamRequest) Reset()         { *m = QueryGetBeamRequest{} }
func (m *QueryGetBeamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeamRequest) ProtoMessage()    {}
func (*QueryGetBeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{0}
}
func (m *QueryGetBeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeamRequest.Merge(m, src)
}
func (m *QueryGetBeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeamRequest proto.InternalMessageInfo

func (m *QueryGetBeamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetBeamResponse struct {
	Beam *Beam `protobuf:"bytes,1,opt,name=beam,proto3" json:"beam,omitempty"`
}

func (m *QueryGetBeamResponse) Reset()         { *m = QueryGetBeamResponse{} }
func (m *QueryGetBeamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeamResponse) ProtoMessage()    {}
func (*QueryGetBeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{1}
}
func (m *QueryGetBeamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeamResponse.Merge(m, src)
}
func (m *QueryGetBeamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeamResponse proto.InternalMessageInfo

func (m *QueryGetBeamResponse) GetBeam() *Beam {
	if m != nil {
		return m.Beam
	}
	return nil
}

type QueryFetchBeamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	State      BeamState          `protobuf:"varint,2,opt,name=state,proto3,enum=lum.network.beam.BeamState" json:"state,omitempty"`
}

func (m *QueryFetchBeamsRequest) Reset()         { *m = QueryFetchBeamsRequest{} }
func (m *QueryFetchBeamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchBeamsRequest) ProtoMessage()    {}
func (*QueryFetchBeamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{2}
}
func (m *QueryFetchBeamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchBeamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchBeamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchBeamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchBeamsRequest.Merge(m, src)
}
func (m *QueryFetchBeamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchBeamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchBeamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchBeamsRequest proto.InternalMessageInfo

func (m *QueryFetchBeamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryFetchBeamsRequest) GetState() BeamState {
	if m != nil {
		return m.State
	}
	return BeamState_StateUnspecified
}

type QueryFetchBeamsResponse struct {
	Beams      []*Beam             `protobuf:"bytes,1,rep,name=beams,proto3" json:"beams,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFetchBeamsResponse) Reset()         { *m = QueryFetchBeamsResponse{} }
func (m *QueryFetchBeamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchBeamsResponse) ProtoMessage()    {}
func (*QueryFetchBeamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{3}
}
func (m *QueryFetchBeamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchBeamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchBeamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchBeamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchBeamsResponse.Merge(m, src)
}
func (m *QueryFetchBeamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchBeamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchBeamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchBeamsResponse proto.InternalMessageInfo

func (m *QueryFetchBeamsResponse) GetBeams() []*Beam {
	if m != nil {
		return m.Beams
	}
	return nil
}

func (m *QueryFetchBeamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFetchBeamsOpenQueueRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFetchBeamsOpenQueueRequest) Reset()         { *m = QueryFetchBeamsOpenQueueRequest{} }
func (m *QueryFetchBeamsOpenQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchBeamsOpenQueueRequest) ProtoMessage()    {}
func (*QueryFetchBeamsOpenQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{4}
}
func (m *QueryFetchBeamsOpenQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchBeamsOpenQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchBeamsOpenQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchBeamsOpenQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchBeamsOpenQueueRequest.Merge(m, src)
}
func (m *QueryFetchBeamsOpenQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchBeamsOpenQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchBeamsOpenQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchBeamsOpenQueueRequest proto.InternalMessageInfo

func (m *QueryFetchBeamsOpenQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFetchBeamsOpenQueueResponse struct {
	BeamIds    []string            `protobuf:"bytes,1,rep,name=beam_ids,json=beamIds,proto3" json:"beam_ids,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFetchBeamsOpenQueueResponse) Reset()         { *m = QueryFetchBeamsOpenQueueResponse{} }
func (m *QueryFetchBeamsOpenQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchBeamsOpenQueueResponse) ProtoMessage()    {}
func (*QueryFetchBeamsOpenQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b631fd88aaa1cdbb, []int{5}
}
func (m *QueryFetchBeamsOpenQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchBeamsOpenQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchBeamsOpenQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchBeamsOpenQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchBeamsOpenQueueResponse.Merge(m, src)
}
func (m *QueryFetchBeamsOpenQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchBeamsOpenQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchBeamsOpenQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchBeamsOpenQueueResponse proto.InternalMessageInfo

func (m *QueryFetchBeamsOpenQueueResponse) GetBeamIds() []string {
	if m != nil {
		return m.BeamIds
	}
	return nil
}

func (m *QueryFetchBeamsOpenQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetBeamRequest)(nil), "lum.network.beam.QueryGetBeamRequest")
	proto.RegisterType((*QueryGetBeamResponse)(nil), "lum.network.beam.QueryGetBeamResponse")
	proto.RegisterType((*QueryFetchBeamsRequest)(nil), "lum.network.beam.QueryFetchBeamsRequest")
	proto.RegisterType((*QueryFetchBeamsResponse)(nil), "lum.network.beam.QueryFetchBeamsResponse")
	proto.RegisterType((*QueryFetchBeamsOpenQueueRequest)(nil), "lum.network.beam.QueryFetchBeamsOpenQueueRequest")
	proto.RegisterType((*QueryFetchBeamsOpenQueueResponse)(nil), "lum.network.beam.QueryFetchBeamsOpenQueueResponse")
}

func init() { proto.RegisterFile("lum-network/beam/query.proto", fileDescriptor_b631fd88aaa1cdbb) }

var fileDescriptor_b631fd88aaa1cdbb = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6a, 0x13, 0x41,
	0x18, 0xef, 0x6c, 0x1a, 0xb5, 0x23, 0x04, 0x19, 0x4b, 0x9b, 0x6e, 0xeb, 0x26, 0x2c, 0xa4, 0xa6,
	0xc5, 0xcc, 0x90, 0xf8, 0x06, 0x11, 0x5a, 0x3c, 0x69, 0xd7, 0x9b, 0x17, 0x99, 0xcd, 0x0e, 0x9b,
	0xc1, 0xec, 0xce, 0x26, 0x33, 0x5b, 0x5b, 0xc4, 0x8b, 0x07, 0xcf, 0x85, 0xde, 0x3c, 0xf8, 0x3c,
	0x1e, 0x0b, 0x5e, 0x3c, 0x4a, 0xe2, 0x83, 0xc8, 0xcc, 0xac, 0xd8, 0x64, 0x53, 0xa3, 0xe2, 0x25,
	0x10, 0xbe, 0xdf, 0xf7, 0xfb, 0xc7, 0xb7, 0x03, 0xf7, 0x46, 0x79, 0xd2, 0x49, 0x99, 0x7a, 0x23,
	0x26, 0xaf, 0x49, 0xc8, 0x68, 0x42, 0xc6, 0x39, 0x9b, 0x9c, 0xe3, 0x6c, 0x22, 0x94, 0x40, 0xf7,
	0x46, 0x79, 0x82, 0x8b, 0x29, 0xd6, 0x53, 0x77, 0x2f, 0x16, 0x22, 0x1e, 0x31, 0x42, 0x33, 0x4e,
	0x68, 0x9a, 0x0a, 0x45, 0x15, 0x17, 0xa9, 0xb4, 0x78, 0xf7, 0x70, 0x20, 0x64, 0x22, 0x24, 0x09,
	0xa9, 0x64, 0x96, 0x88, 0x9c, 0x76, 0x43, 0xa6, 0x68, 0x97, 0x64, 0x34, 0xe6, 0xa9, 0x01, 0x17,
	0xd8, 0xdd, 0x92, 0xb2, 0xfe, 0xb1, 0x43, 0xbf, 0x05, 0xef, 0x9f, 0xe8, 0xf5, 0x63, 0xa6, 0xfa,
	0x8c, 0x26, 0x01, 0x1b, 0xe7, 0x4c, 0x2a, 0x54, 0x83, 0x0e, 0x8f, 0xea, 0xa0, 0x09, 0xda, 0x1b,
	0x81, 0xc3, 0x23, 0xbf, 0x0f, 0x37, 0xe7, 0x61, 0x32, 0x13, 0xa9, 0x64, 0xe8, 0x10, 0xae, 0x6b,
	0x32, 0x83, 0xbc, 0xdb, 0xdb, 0xc2, 0x8b, 0x31, 0xb0, 0x41, 0x1b, 0x8c, 0x7f, 0x09, 0xe0, 0x96,
	0x21, 0x39, 0x62, 0x6a, 0x30, 0xd4, 0x03, 0xf9, 0x53, 0xee, 0x08, 0xc2, 0x5f, 0xb6, 0x0b, 0xb2,
	0x7d, 0x6c, 0x33, 0x62, 0x9d, 0x11, 0xdb, 0xb2, 0x8a, 0x8c, 0xf8, 0x39, 0x8d, 0x59, 0xb1, 0x1b,
	0x5c, 0xdb, 0x44, 0x5d, 0x58, 0x95, 0x8a, 0x2a, 0x56, 0x77, 0x9a, 0xa0, 0x5d, 0xeb, 0xed, 0x2e,
	0xf7, 0xf3, 0x42, 0x43, 0x02, 0x8b, 0xf4, 0x2f, 0x00, 0xdc, 0x2e, 0xb9, 0x2a, 0xd2, 0x3d, 0x82,
	0x55, 0xbd, 0x24, 0xeb, 0xa0, 0x59, 0xf9, 0x4d, 0x3c, 0x0b, 0x42, 0xc7, 0x73, 0x21, 0x1c, 0x13,
	0xe2, 0xe1, 0xca, 0x10, 0x56, 0xea, 0x7a, 0x0a, 0x9f, 0xc3, 0xc6, 0x82, 0xa3, 0x67, 0x19, 0x4b,
	0x4f, 0x72, 0x96, 0xb3, 0xe5, 0x85, 0x55, 0xfe, 0xb5, 0x30, 0xff, 0x03, 0x80, 0xcd, 0x9b, 0xb5,
	0x8a, 0x1a, 0x76, 0xe0, 0x1d, 0x9d, 0xf0, 0x15, 0x8f, 0x6c, 0x13, 0x1b, 0xc1, 0x6d, 0xfd, 0xff,
	0x69, 0xf4, 0xff, 0x32, 0xf7, 0x3e, 0x56, 0x60, 0xd5, 0x18, 0x41, 0xa7, 0x70, 0x5d, 0xfb, 0x40,
	0xad, 0x72, 0xdb, 0x4b, 0x2e, 0xd5, 0xdd, 0x5f, 0x05, 0xb3, 0x62, 0x7e, 0xe3, 0xfd, 0x97, 0xef,
	0x97, 0xce, 0x0e, 0xda, 0x26, 0x8b, 0x9f, 0x83, 0x24, 0x6f, 0x79, 0xf4, 0x0e, 0x9d, 0xc1, 0xaa,
	0xc9, 0x8f, 0xda, 0x37, 0x30, 0x96, 0xce, 0xd6, 0x3d, 0xf8, 0x03, 0x64, 0x21, 0xef, 0x1a, 0xf9,
	0x4d, 0x84, 0xca, 0xf2, 0xe8, 0x13, 0x80, 0xb5, 0xf9, 0xea, 0x51, 0x77, 0x25, 0xf3, 0xe2, 0x49,
	0xb8, 0xbd, 0xbf, 0x59, 0x29, 0x5c, 0xb5, 0x8c, 0xab, 0x06, 0x7a, 0x50, 0x76, 0xd5, 0x11, 0x19,
	0x4b, 0x3b, 0x63, 0x0d, 0xef, 0x3f, 0xf9, 0x3c, 0xf5, 0xc0, 0xd5, 0xd4, 0x03, 0xdf, 0xa6, 0x1e,
	0xb8, 0x98, 0x79, 0x6b, 0x57, 0x33, 0x6f, 0xed, 0xeb, 0xcc, 0x5b, 0x7b, 0x79, 0x10, 0x73, 0x35,
	0xcc, 0x43, 0x3c, 0x10, 0xc9, 0x1c, 0xc5, 0x60, 0x48, 0x79, 0x4a, 0xce, 0xec, 0x73, 0xa3, 0xce,
	0x33, 0x26, 0xc3, 0x5b, 0xe6, 0xc1, 0x79, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x08, 0x35,
	0xe4, 0x09, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Beam(ctx context.Context, in *QueryGetBeamRequest, opts ...grpc.CallOption) (*QueryGetBeamResponse, error)
	Beams(ctx context.Context, in *QueryFetchBeamsRequest, opts ...grpc.CallOption) (*QueryFetchBeamsResponse, error)
	BeamsOpenQueue(ctx context.Context, in *QueryFetchBeamsOpenQueueRequest, opts ...grpc.CallOption) (*QueryFetchBeamsOpenQueueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Beam(ctx context.Context, in *QueryGetBeamRequest, opts ...grpc.CallOption) (*QueryGetBeamResponse, error) {
	out := new(QueryGetBeamResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Query/Beam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Beams(ctx context.Context, in *QueryFetchBeamsRequest, opts ...grpc.CallOption) (*QueryFetchBeamsResponse, error) {
	out := new(QueryFetchBeamsResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Query/Beams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BeamsOpenQueue(ctx context.Context, in *QueryFetchBeamsOpenQueueRequest, opts ...grpc.CallOption) (*QueryFetchBeamsOpenQueueResponse, error) {
	out := new(QueryFetchBeamsOpenQueueResponse)
	err := c.cc.Invoke(ctx, "/lum.network.beam.Query/BeamsOpenQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Beam(context.Context, *QueryGetBeamRequest) (*QueryGetBeamResponse, error)
	Beams(context.Context, *QueryFetchBeamsRequest) (*QueryFetchBeamsResponse, error)
	BeamsOpenQueue(context.Context, *QueryFetchBeamsOpenQueueRequest) (*QueryFetchBeamsOpenQueueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Beam(ctx context.Context, req *QueryGetBeamRequest) (*QueryGetBeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Beam not implemented")
}
func (*UnimplementedQueryServer) Beams(ctx context.Context, req *QueryFetchBeamsRequest) (*QueryFetchBeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Beams not implemented")
}
func (*UnimplementedQueryServer) BeamsOpenQueue(ctx context.Context, req *QueryFetchBeamsOpenQueueRequest) (*QueryFetchBeamsOpenQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeamsOpenQueue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Beam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Beam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Query/Beam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Beam(ctx, req.(*QueryGetBeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Beams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchBeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Beams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Query/Beams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Beams(ctx, req.(*QueryFetchBeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BeamsOpenQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchBeamsOpenQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BeamsOpenQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lum.network.beam.Query/BeamsOpenQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BeamsOpenQueue(ctx, req.(*QueryFetchBeamsOpenQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lum.network.beam.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Beam",
			Handler:    _Query_Beam_Handler,
		},
		{
			MethodName: "Beams",
			Handler:    _Query_Beams_Handler,
		},
		{
			MethodName: "BeamsOpenQueue",
			Handler:    _Query_BeamsOpenQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lum-network/beam/query.proto",
}

func (m *QueryGetBeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Beam != nil {
		{
			size, err := m.Beam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchBeamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchBeamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchBeamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchBeamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchBeamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchBeamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beams) > 0 {
		for iNdEx := len(m.Beams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchBeamsOpenQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchBeamsOpenQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchBeamsOpenQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchBeamsOpenQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchBeamsOpenQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchBeamsOpenQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BeamIds) > 0 {
		for iNdEx := len(m.BeamIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BeamIds[iNdEx])
			copy(dAtA[i:], m.BeamIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.BeamIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetBeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Beam != nil {
		l = m.Beam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchBeamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovQuery(uint64(m.State))
	}
	return n
}

func (m *QueryFetchBeamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beams) > 0 {
		for _, e := range m.Beams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchBeamsOpenQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFetchBeamsOpenQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BeamIds) > 0 {
		for _, s := range m.BeamIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetBeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Beam == nil {
				m.Beam = &Beam{}
			}
			if err := m.Beam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchBeamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchBeamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchBeamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= BeamState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchBeamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchBeamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchBeamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beams = append(m.Beams, &Beam{})
			if err := m.Beams[len(m.Beams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchBeamsOpenQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchBeamsOpenQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchBeamsOpenQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchBeamsOpenQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchBeamsOpenQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchBeamsOpenQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeamIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeamIds = append(m.BeamIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
